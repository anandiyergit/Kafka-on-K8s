Client side work

----------------------------
Extract and configure the user credentials
----------------------------

export KAFKA_USER_NAME=tls-auth-user

Certificate
kubectl get secret $KAFKA_USER_NAME -o jsonpath='{.data.user\.crt}' | base64 --decode > user.crt

Key
kubectl get secret $KAFKA_USER_NAME -o jsonpath='{.data.user\.key}' | base64 --decode > user.key

User Path
kubectl get secret $KAFKA_USER_NAME -o jsonpath='{.data.user\.p12}' | base64 --decode > user.p12

Password
kubectl get secret $KAFKA_USER_NAME -o jsonpath='{.data.user\.password}' | base64 --decode > user.password

----------------------------
Import the entry in user.p12 into another keystore
----------------------------

export USER_P12_FILE_PATH=user.p12
export USER_KEY_PASSWORD_FILE_PATH=user.password
export KEYSTORE_NAME=kafka-auth-keystore.jks
export KEYSTORE_PASSWORD=foobar
export PASSWORD=`cat $USER_KEY_PASSWORD_FILE_PATH`

keytool -importkeystore -deststorepass $KEYSTORE_PASSWORD -destkeystore $KEYSTORE_NAME -srckeystore $USER_P12_FILE_PATH -srcstorepass $PASSWORD -srcstoretype PKCS12

keytool -list -alias $KAFKA_USER_NAME -keystore $KEYSTORE_NAME

----------------------------
Extract and configure server CA cert
----------------------------

export CLUSTER_NAME=tls-auth-cluster

kubectl get secret $CLUSTER_NAME-cluster-ca-cert -o jsonpath='{.data.ca\.crt}' | base64 --decode > ca.crt

kubectl get secret $CLUSTER_NAME-cluster-ca-cert -o jsonpath='{.data.ca\.password}' | base64 --decode > ca.password

----------------------------
Import it into truststore
----------------------------

export CERT_FILE_PATH=ca.crt
export CERT_PASSWORD_FILE_PATH=ca.password
# replace this with the path to your truststore
export KEYSTORE_LOCATION=/Library/Java/JavaVirtualMachines/openjdk.jdk/Contents/Home/lib/security/cacerts
export CA_PASSWORD=`cat $CERT_PASSWORD_FILE_PATH`

# you will prompted for the truststore password. for JDK truststore, the default password is "changeit"
# Type yes in response to the 'Trust this certificate? [no]:' prompt
keytool -importcert -alias strimzi-kafka-cert-new -file $CERT_FILE_PATH -keystore $KEYSTORE_LOCATION -keypass $CA_PASSWORD

keytool -list -alias strimzi-kafka-cert-new -keystore $KEYSTORE_LOCATION

----------------------------
Create properties file for Kafka CLI clients
----------------------------

export KAFKA_CLUSTER_NAME=tls-auth-cluster

Create a file called client-ssl-auth.properties with the following contents:

bootstrap.servers=[LOADBALANCER_PUBLIC_IP]:9094
security.protocol=SSL
ssl.truststore.location=[TRUSTSTORE_LOCATION]
ssl.truststore.password=changeit
ssl.keystore.location=kafka-auth-keystore.jks
ssl.keystore.password=foobar
ssl.key.password=[contents of user.password file]

----------------------------
Create Kafka Topics
----------------------------

----------------------------
Create Kafka Producer/Consumer
----------------------------

export KAFKA_HOME=[replace with kafka installation] e.g. /Users/foobar/kafka_2.12-2.3.0

export LOADBALANCER_PUBLIC_IP=[replace with public-ip]

export TOPIC_NAME=tlsauth

# on a terminal, start producer and send a few messages
kafka-console-producer --broker-list $LOADBALANCER_PUBLIC_IP:9094 --topic $TOPIC_NAME --producer.config client-ssl-auth.properties

# on another terminal, start consumer
kafka-console-consumer --bootstrap-server $LOADBALANCER_PUBLIC_IP:9094 --topic $TOPIC_NAME --consumer.config client-ssl-auth.properties --from-beginning